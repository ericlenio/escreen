# vim:filetype=sh
#
# ssh wrapper script
#
ssh() {
  [ ! -t 0 -o ! -t 1 ] && {
    # in a pipeline
    env ssh "$@"
    return $?
  }
  local i last_arg=${@:$#} \
    ssh_legal_opts="1246ab:c:e:fgi:kl:m:no:p:qstvxACD:E:F:GI:J:KL:MNO:PQ:R:S:TVw:W:XYy" \
    OPTS arg1 h ssh_user_host cmdline_ssh_host sshrc rem_port c0 c1
  local -a ssh_opts
  [ -z "$last_arg" ] && { echo "no arguments to ssh?"; return 1; }
  # Need to determine now if we are just running a plain shell in the remote
  # host, or some other command. For the former case, we set up a
  # ControlMaster; for the latter, no ControlMaster is necessary and we just
  # run the command as is.
  #
  # So now we strip out all the ssh options. What's left would be the
  # user@ssh_host part (or just ssh_host), and possibly a command + args to be
  # run on the remote host.
  #
  # List of legal ssh options: pulled from ssh.c from openssh-client debian
  # package. As these options can change my preference was to go about it a
  # different way: it could potentially be done with ssh's Match statement:
  # acquire original ssh host from something like:
  #   Match exec "bash -c 'echo orighost=%n'"
  # but that statement cannot work on a command line, only inside
  # ~/.ssh/config, so not really a viable option.
  OPTIND=1
  while builtin getopts $ssh_legal_opts arg1; do
    case $arg1 in
      f|N|M)
        env ssh "$@"
        return $?
        ;;
    esac
    ssh_opts+=("-$arg1")
    [ "$OPTARG" ] && ssh_opts+=("$OPTARG")
  done
  # after this "for" loop we know the ssh host is left in $1 (assuming an ssh
  # host was provided on the command line, which is most of the time)
  for ((i=1;i<$OPTIND;i++)); do shift; done
  if [ $# = 0 ]; then
    # Might have done -V, allow to continue
    env ssh "${ssh_opts[@]}"
    return $?
  fi
  # should now have user@ssh_host left in function arguments, or just plain
  # ssh_host
  ssh_user_host="$1"
  shift
  cmdline_ssh_host=${ssh_user_host##*@}
  h=$cmdline_ssh_host
  [ "$SSH_STY_LBL" ] && h=$SSH_STY_LBL
  [ "$STY" ] && {
    printf "\033k$h\033\134"
    # restore screen window title when this function is interrupted, or just
    # returns normally
    trap 'printf "\033k${HOSTNAME}\033\134"; trap - INT RETURN' INT RETURN
  }
  eval $(_esh_e)
  # if anything left in the command line (and ssh option -t is not set), then
  # we just do straight through call to ssh.
  if [ $# -gt 0 ]; then
    ssh_opts+=($ssh_user_host "$@")
  else
    #
    # We need an open port on the remote host. Pick a random port and hope it
    # is open: worst case is the port is not open, and
    # -oExitOnForwardFailure=yes causes it to fail, and user can then just
    # re-issue the same ssh command. Deemed a small enough risk to be
    # acceptable. Other strategies that were considered:
    #
    # 1) ssh to host and find a known open port: at the expense of 2 separate
    # ssh connections
    #
    # 2) run a ControlMaster, and then a separate ssh command to find the port:
    # good with modern ssh's, but various issues with older ssh (like 4.7 on
    # Ubuntu Hardy)
    #
    # 3) After connecting to remote ssh host, find open port, then run GNU
    # screen escape to run ssh escape command (ESC ] 83 ; cmd ^G) to forward
    # the port: this leads to terminal IO issues when stuffing the ssh escape
    # command into the terminal driver.
    #
    rem_port=$(( $RANDOM % 1000 + 56100 ))
    #
    # Assumption: /bin/sh exists on remote system. We use it to check for
    # /bin/bash, and if that exists set up prefered bash shell settings.
    # Otherwise, run default login shell.
    #
    # OLD WAY: gzip + base64 encode to pass init code to remote session ...
    #
    #local c="$(_bash_init $ssh_user_host-0000 $rem_port|gzip -9 -c|openssl enc -a -A)"
    #env ssh "${ssh_opts[@]}" -t -oExitOnForwardFailure=yes -R$rem_port:localhost:$(_esh_e) $ssh_user_host -- sh -c "'"'b=`which bash`; [ "$b" ] && exec $b -c "eval $(echo '$c'|openssl enc -d -a -A|gzip -d -c)" - "$@" || exec $SHELL -l'"'" - "${remote_cmd[@]}"
    #
    # NEW WAY: just gzip and send the init code via netcat; requires opening a
    # 2nd forwarded port; this way saves the overhead of the base64 encoding
    #
    # New way sucks ... too many bugs with different versions of nc on Mac,
    # freebsd, openbsd, et al, and also when dealing with slower connections
    # you get weird timeout issues, so going back to old way
    #
    c0=$(echo ':
sshrc=/etc/escreen.sshrc
[ -f $sshrc ] && . $sshrc
'"$(_bash_init $ssh_user_host-$(pwgen 6) $rem_port)"'
' | gzip -9c | openssl enc -a -A)

    c1=$(echo ':
b=`which bash`
[ ! "$b" ] && exec $SHELL -l
exec $b -c "$(echo '$c0' | openssl enc -d -a -A | gzip -d -c)"
' | gzip -9c | openssl enc -a -A)

    ssh_opts+=(
      -t -oServerAliveInterval=30 -oExitOnForwardFailure=yes -R$rem_port:127.0.0.1:$ESH_PORT $ssh_user_host
      sh -c '"$(echo '$c1' | openssl enc -d -a -A | gzip -d -c)"'
    )
  fi
  env ssh "${ssh_opts[@]}"
}
export -f ssh
