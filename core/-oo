# vim:filetype=sh
#
# run a one off script from the user's current shell
#
# usage:
#
# 1) run with no args to pick the one off script from a list
#
# 2) run with "-" as arg 1, you are prompted to pick the one off script from a
# list and remaining args are passed to it
#
# 3) run with the name of the one off script as arg 1; remaining args are
# passed to that script
#
-oo() {
  local list script="$1" tmp_script yn
  if [ "$script" = - ]; then
    shift
    script=""
  fi
  if [ -z "$script" ]; then
    list=$(_esh_b ooList)
    if ! script=$(-pick-something "Which one-off script:" "$list"); then
      return
    fi
    read -p "Confirm: execute $script (y/n)? " yn
    if [ "$yn" != y ]; then
      return
    fi
  else
    shift
  fi
  if ! tmp_script=$(mktemp ${TMPDIR:-/tmp}/$script.XXXXXX); then
    return $?
  fi
  trap "echo trap: $tmp_script; trap - RETURN; rm -f $tmp_script" RETURN
  # upload the script to the current executing shell
  _esh_b ooGet $script | {
    local hash1 hash2
    # ooGet first sends a sha256 hash of the one off script, read it
    read hash1
    # remaining data from ooGet is the gzip'd script
    gzip -dc > $tmp_script
    if [[ $(openssl dgst -sha256 -hex $tmp_script) =~ ([a-z0-9]+)$ ]]; then
      hash2=${BASH_REMATCH[1]}
      # if hashes match, go ahead and run the script
      if [ "$hash1" -a "$hash1" = "$hash2" ]; then
        if head -1 $tmp_script | grep -w ENOENT; then
          return 1
        fi
        chmod 700 $tmp_script
        # execute the one off script now
        $tmp_script "$@" < ${SSH_TTY:-/dev/tty}
      else
        echo "$FUNCNAME: mismatched hashes: $hash1/$hash2" >&2
        return 1
      fi
    fi
  }
}
