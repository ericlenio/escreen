# vim:filetype=bash
# Upload a file from the system that launched escreen to the current running
# shell's working directory.
upload() {
  local status c upload_file upload_file_size upload_file_md5 last4 eot=$'\x04'
  eval "$(_esh_e)"
  {
    read status
    if [ "$status" != E_AUTH_TOKEN_OK ]; then
      echo "$FUNCNAME FAIL: $status" >&2
      return 1
    fi
cat /dev/null > /tmp/l
    while true; do
      IFS='' read -s -d '' -n 1 c
printf %s "$c" >> /tmp/l
      if [ "$c" = "$eot" ]; then
        break
      fi
      printf %s "$c"
      #if [ "$c" = $'\n' ]; then
        #break
      #fi
    done
    IFS=$'\r|' read status upload_file upload_file_md5
    upload_file=$(basename "$upload_file")
    if [ "$status" != E_FILE_INFO ]; then
      echo "$status" >&2
      return 1
    fi
    if ! gzip -d -c > "$upload_file"; then
      echo "$FUNCNAME FAIL: $upload_file did not decompress through gzip" >&2
      return 1
    fi
    upload_file_md5a=$(openssl md5 "$upload_file")
    upload_file_md5a=${upload_file_md5a##*= }
    if [ $upload_file_md5 != $upload_file_md5a ]; then
      echo >&2
      echo "$FUNCNAME FAIL: md5 hash mismatch: expected $upload_file_md5, but got $upload_file_md5a" >&2
      return 1
    fi
    echo SUCCESS
    return 0
  } < <(
    {
      echo $ESH_TERM_AUTH_TOKEN pickFile
      while true; do
        IFS='' read -s -d '' -n 1 c
        printf %s "$c"
        if [ "$c" = $'\n' ]; then
          break
        fi
      done
    } | nc 127.0.0.1 $ESH_PORT
  )
  return

  # Use md5 to verify the file transferred correctly
  local expected_md5=$(_esh_b getUploadFileHash $token)
  if [ $setmode = 1 ]; then
    chmod $mode "$upload_file"
    echo "set mode: $mode"
  fi
  echo "Checking MD5 now ..."
  local md5=$(openssl md5 -hex "$upload_file")
  # md5 will look something like this:
  # MD5(somefile)= 7f851736b8f86d8ee734a5d94bedf2f7
  # remove the prefix
  md5=${md5##*= }
  # force to lowercase: OS X cannot do "md5=${md5,,}" so use tr
  md5=$(echo $md5 | tr "[:upper:]" "[:lower:]")
  if [ "$md5" != "$expected_md5" ]; then
    echo "ERROR: md5 check failed for $upload_file"
  else
    echo "SUCCESS: MD5 check verified for $upload_file"
  fi
  _esh_b dropUploadToken $token
}
