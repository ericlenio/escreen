# vim:filetype=bash
screen() {
  # make copy of original function args
  local args=("$@") opt rcfile root_sty=$([ "$SSH_TTY" ] && echo 0 || echo 1) keyserver_port=1054 os=$(uname) resume_msg_window_id=39 curl_max_time=3
  export ESH_ATSERVER_URL=http://127.0.0.1:$keyserver_port
  # switch port if root, so we can allow concurrent gnu screen sessions for
  # root and 1 other user
  [ $EUID = 0 ] && keyserver_port=1055
  # Note: escreen sends "--", that is why we skip it here
  if [ "$1" != -- ]; then
    for opt in "$@"; do
      case $opt in
        -r)
          local curr_sty=${STY:-some_value} pick_sty pick_sty_line esh_sty
          local stys=$(
            while read l; do
              if [[ "$l" =~ ^[[:blank:]]*([0-9]+\.[^[:blank:]]+)[[:blank:]]+([[:print:]]+) ]]; then
                pick_sty=${BASH_REMATCH[1]}
                pick_sty_status=${BASH_REMATCH[2]}
                #if [ ! "$t" ]; then
                  #t=$(mktemp -u)
                  #mkfifo -m 0600 $t
                #fi
                #env screen -X -S $pick_sty screen bash -c "echo \$ESH_VERSION > $t"
                #if [ $(<$t) = $ESH_VERSION ]; then
                  #echo "$pick_sty $pick_sty_status"
                #fi
                echo "$pick_sty $pick_sty_status"
              fi
            done < <(env screen -ls | grep -v $curr_sty)
            [ "$t" ] && rm $t
          )
          if [ -z "$stys" ]; then
            echo "No screen sessions detected."
            return 0
          fi
          if [ $(echo "$stys" | wc -l) = 1 ]; then
            pick_sty_line="$stys"
          elif ! pick_sty_line=$(-pick-something "Resume which session?" "$stys"); then
            return $?
          fi
          local refresh_token=0
          if [[ $pick_sty_line =~ ^([0-9]+\.([-\.@[:alnum:]]+)) ]]; then
            pick_sty=${BASH_REMATCH[1]}
            esh_sty=${BASH_REMATCH[2]}
            if [ "$SSH_TTY" ]; then
              if [ $os != OpenBSD ]; then
                # as of OpenBSD 6.9, gnu screen password support is not working

                # test if the screen session is password protected
                if env screen -Q -S $pick_sty windows >/dev/null; then
                  read -p "$pick_sty does NOT have a password set [press return]"
                else
                  echo "Resuming $pick_sty. Once the password is entered, remove it from the session (^e-P), then disconnect."
                  read -p "[press return]"
                  if ! env TERM=${TERM#screen.} screen -d -r $pick_sty; then
                    return $?
                  fi
                  # kill the "resume message" window
                  env screen -X -S $pick_sty at $resume_msg_window_id kill
                  refresh_token=1
                fi
              fi
            fi
            ESH_CURRENT_STY=$pick_sty
            _esh_e +ESH_CURRENT_STY
            eval "$(_esh_e)"
            ESH_TAT_HASH=$(_esh_at hash)
            _esh_e $esh_sty ESH_PORT SSH_AUTH_SOCK ESH_TERM_PID ESH_TAT_HASH
            if ! env screen -X -S $pick_sty register p $ESH_TERM_AUTH_TOKEN; then
              echo "$FUNCNAME: failed to register ESH_TERM_AUTH_TOKEN on STY=$pick_sty" >&2
              return 1
            fi
            if [ $refresh_token = 1 ]; then
              if ! curl -v -f -S --max-time $curl_max_time $ESH_ATSERVER_URL/refresh-auth-token; then
                echo "$FUNCNAME: failed call to /refresh-auth-token" >&2
                read -p "[press return to continue]"
              fi
            fi
            #_esh_b registerSty $ESH_TERM_PID $pick_sty $root_sty
            # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
            env TERM=${TERM#screen.} screen -d -r $pick_sty
            return $?
          else
            echo "failed to acquire ESH_STY value" >&2
            return 1
          fi
          ;;
        -d|-D|-R|-RR|-ls|-list|-Q|-v|-x|-X)
          env screen "$@"
          return $?
          ;;
      esac
    done
  fi
  local esc=^Aa esh_info

  if [ $root_sty = 0 ]; then
    # assume nested gnu screen, so use alternate escape sequence
    esc=^Ee
  else
    # put a little version string in the caption
    esh_info=" %{= cd}v$ESH_VERSION"
  fi

  if ! curl -f -s -S --max-time $curl_max_time $ESH_ATSERVER_URL/hello; then
    local atserver_port=${ESH_ATSERVER_URL##*:}
    local atserver_logfile=$ESH_TMP/$USER-atserver-$atserver_port.log
    _esh_atserver $atserver_port >$atserver_logfile 2>&1 </dev/null &
    export ESH_ATSERVER_PID=$!
  else
    export ESH_ATSERVER_PID=$(curl -f -s -S --max-time $curl_max_time $ESH_ATSERVER_URL/get-pid)
  fi

  rcfile=$(mktemp)

  _func_binder() {
    # treat arg 1 as a function name, then re-declare the function with the
    # remaining arguments bound as parameters to the original function
    local funcname=$1
    shift
    eval "$funcname() { _$(declare -f $funcname); _$funcname $@ \"\$@\"; }"
  }

  bootfunc() {
    local curl_max_time=$1 register=$2 my_tty
    read ESH_TERM_AUTH_TOKEN
    read my_tty
    if [ $register = 1 ]; then
      if ! curl -f --max-time $curl_max_time -d STY=$STY -H "X-Escreen-Auth: $ESH_TERM_AUTH_TOKEN" -H "X-Escreen-User: $USER" $ESH_ATSERVER_URL/set-sty; then
        echo "$FUNCNAME: failed to call $ESH_ATSERVER_URL/set-sty" >&2
        read -p "[press return]" <$my_tty
      else
        echo "successfully registered $STY to $ESH_ATSERVER_URL/set-sty"
        ESH_CURRENT_STY=$STY
        _esh_e +ESH_CURRENT_STY
      fi
    fi
    exec bash -c "$(ESH_TERM_AUTH_TOKEN=$ESH_TERM_AUTH_TOKEN _init_ctx $ESH_STY $ESH_PORT)" <$my_tty
  }
  _func_binder bootfunc $curl_max_time
  export -f bootfunc

  resume_msg() {
    read -p "*** please press the \"password clear\" key sequence ($1-P) ***"
  }
  _func_binder resume_msg $esc
  export -f resume_msg

  lockscreen() {
    env screen -X eval "password HIaVMGDwznpBE" "screen $1 bash -c resume_msg" "select $1"
  }
  _func_binder lockscreen $resume_msg_window_id
  export -f lockscreen

  cat << EOF >$rcfile
screen bash -c "bootfunc 1 < <(echo $ESH_TERM_AUTH_TOKEN; tty)"
bind c screen bash -c "bootfunc 0 < <(echo $ESH_TERM_AUTH_TOKEN; tty)"
#termcapinfo * '' u0=my_user0_string
multiuser off
bind / screen $ESH_EDITOR $(_esh_b ESH_PW_FILE)
# bind "%" to take a screenshot, and open a new window to edit it
bind % exec bash -c 'f=\$(mktemp) t=\$RANDOM; env screen -X hardcopy \$f; env screen -t \$t sh -c "$ESH_EDITOR \$f; rm \$f"; env screen -X select \$t'
bind \040 windowlist -b
vbell on
vbell_msg DING
defmonitor on
msgwait 1
hardstatus ignore
shelltitle "$ |:"
caption always "%{= kw}%-w%{= BW}%n%t%{-}%+w %-= @%H %{= Y}%l%{-} %m/%d %0c$esh_info"
register p $ESH_TERM_AUTH_TOKEN
unsetenv SCREENRC
bind P eval "password none" "detach"
screen rm $rcfile
EOF
  # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
  env SCREENRC=$rcfile TERM=${TERM#screen.} screen -ln -S $ESH_STY -e$esc "${args[@]}"
}
