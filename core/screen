# vim:filetype=bash
screen() {
  # make copy of original function args
  local args=("$@") opt rcfile root_sty=$([ "$SSH_TTY" ] && echo 0 || echo 1) keyserver_port=1054
  export ESH_ATSERVER_URL=http://127.0.0.1:$keyserver_port
  # switch port if root, so we can allow concurrent gnu screen sessions for
  # root and 1 other user
  [ $EUID = 0 ] && keyserver_port=1055
  # Note: escreen sends "--", that is why we skip it here
  if [ "$1" != -- ]; then
    for opt in "$@"; do
      case $opt in
        -r)
          local curr_sty=${STY:-some_value} pick_sty pick_sty_line esh_sty
          local stys=$(
            while read l; do
              if [[ "$l" =~ ^[[:blank:]]*([0-9]+\.[^[:blank:]]+)[[:blank:]]+([[:print:]]+) ]]; then
                pick_sty=${BASH_REMATCH[1]}
                pick_sty_status=${BASH_REMATCH[2]}
                if [ ! "$t" ]; then
                  t=$(mktemp -u)
                  mkfifo -m 0600 $t
                fi
                env screen -X -S $pick_sty screen bash -c "echo \$ESH_VERSION > $t"
                if [ $(<$t) = $ESH_VERSION ]; then
                  echo "$pick_sty $pick_sty_status"
                fi
              fi
            done < <(env screen -ls | grep -v $curr_sty)
            [ "$t" ] && rm $t
          )
          if [ -z "$stys" ]; then
            echo "No screen sessions detected."
            return 0
          fi
          if [ $(echo "$stys" | wc -l) = 1 ]; then
            pick_sty_line="$stys"
          elif ! pick_sty_line=$(-pick-something "Resume which session?" "$stys"); then
            return $?
          fi
          if [[ $pick_sty_line =~ ^([0-9]+\.([^[:blank:]]+)) ]]; then
            pick_sty=${BASH_REMATCH[1]}
            esh_sty=${BASH_REMATCH[2]}
            eval "$(_esh_e)"
            _esh_at hash
            _esh_e $esh_sty ESH_PORT SSH_AUTH_SOCK ESH_TERM_PID ESH_TAT_HASH
            if ! env screen -X -S $pick_sty register p $ESH_TERM_AUTH_TOKEN; then
              echo "$FUNCNAME: failed to register ESH_TERM_AUTH_TOKEN on STY=$pick_sty" >&2
              return 1
            fi
            if ! curl -v -f -S $ESH_ATSERVER_URL/refresh-auth-token; then
              echo "$FUNCNAME: failed call to /refresh-auth-token" >&2
              return 1
            fi
            #_esh_b registerSty $ESH_TERM_PID $pick_sty $root_sty
            # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
            env TERM=${TERM#screen.} screen -d -r $pick_sty
            return $?
          else
            echo "failed to acquire ESH_STY value" >&2
            return 1
          fi
          ;;
        -d|-D|-R|-RR|-ls|-list|-Q|-v|-x|-X)
          env screen "$@"
          return $?
          ;;
      esac
    done
  fi
  # anticipatory optimization: pre-load vim, so it does not need to be loaded
  # in every screen window
  v --version >/dev/null
  local esc=^Aa esh_info

  if [ $root_sty = 0 ]; then
    # assume nested gnu screen, so use alternate escape sequence
    esc=^Ee
  else
    # put a little version string in the caption
    esh_info=" %{= cd}v$ESH_VERSION"
  fi

  rcfile=$(mktemp)
  cat << EOF >$rcfile
#termcapinfo * '' u0=my_user0_string
multiuser off
bind / screen $ESH_EDITOR $(_esh_b ESH_PW_FILE)
# bind "%" to take a screenshot, and open a new window to edit it
bind % exec bash -c 'f=\$(mktemp) t=\$RANDOM; env screen -X hardcopy \$f; env screen -t \$t sh -c "$ESH_EDITOR \$f; rm \$f"; env screen -X select \$t'
bind \040 windowlist -b
vbell on
vbell_msg DING
defmonitor on
msgwait 1
hardstatus ignore
shelltitle "$ |:"
caption always "%{= kw}%-w%{= BW}%n%t%{-}%+w %-= @%H %{= Y}%l%{-} %m/%d %0c$esh_info"
register p $ESH_TERM_AUTH_TOKEN
unsetenv SCREENRC
screen bash -c "ESH_TERM_AUTH_TOKEN=$ESH_TERM_AUTH_TOKEN exec bash"
bind c screen bash -c "ESH_TERM_AUTH_TOKEN=$ESH_TERM_AUTH_TOKEN exec bash"
#screen bash -c '_esh_b registerSty $ESH_TERM_PID \$STY $root_sty; rm $rcfile'
EOF
  # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
  env SCREENRC=$rcfile TERM=${TERM#screen.} screen -ln -S $ESH_STY -e$esc "${args[@]}"
}
