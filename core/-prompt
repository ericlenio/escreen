# vim:filetype=bash
#
# logic to execute with bash's PROMPT_COMMAND
#
-prompt() {
  if [ -z "$(trap -p)" ]; then
    ESH_TOP_LEVEL_SHELL=1
    trap _esh_trap_EXIT EXIT
    trap _esh_trap_HUP HUP
    # set default trap on USR1: this signal is used to control the auth token
    # server, but on MacOS the default USR1 handler will end the shell
    trap "echo '$FUNCNAME: caught USR1' >/dev/tty" USR1
  fi

  if [ -z "$ESH_TERM_AUTH_TOKEN" ]; then
    _esh_at force_new_at
  fi

  # use DEBUG trap to load environment vars from _esh_e before every command is
  # run; only set the trap if we detect DEBUG has no signal handler yet
  #
  # 09/17/2020 taking out this DEBUG trap, it's an abuse of DEBUG and is
  # causing other conflicts, e.g.
  # https://superuser.com/questions/1084406/chained-pipes-in-bash-throws-operation-not-permitted
  #
  #if [ -z "$(trap -p DEBUG)" ]; then
    # TO DO: do some sort of sanity checking that _esh_e contains only
    # "declare" statements
    #trap 'eval "$(_esh_e)"' DEBUG
    # set shell option so that the DEBUG trap is executed in subshells
    #set -T
  #fi

  if [[ "$BASHOPTS" =~ expand_aliases ]]; then
    # disable all aliases, sometimes they conflict with bash functions of the
    # same name (in particular, often have "alias l='ls -CF'" in $HOME/.bashrc);
    #
    # each new window in gnu screen will always source $HOME/.bashrc, this is
    # why we put this logic to run in PROMPT_COMMAND and not _esh_i
    shopt -u expand_aliases
    unalias -a
  fi

  if [ -z "$RA_USER_PASSWORD_64" ]; then
    read RA_USER_PASSWORD_64 < <(_esh_y _ra_get_ldap_pw)
  fi

  # 
  # if not inside GNU screen, check that we have a shell EXIT handler to erase
  # ESH_TERM_AUTH_TOKEN from all used GNU screen sessions
  #
  #if [ -z "$STY" -a -z "$(trap -p EXIT)" ]; then
  #  _esh_exit() {
  #    if [ "$ESH_STY" ]; then
  #      # erase ESH_TERM_AUTH_TOKEN from screen session register
  #      env screen -S $ESH_STY -X register p "" >/dev/null 2>&1
  #    fi
  #  }
  #  trap _esh_exit EXIT
  #fi

  # work around ubuntu hardcoding PS1
  PS1="$ESH_PS1"
}
export -f -- -prompt
