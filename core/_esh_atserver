# vim:filetype=bash
#
# auth token web server
#
_esh_atserver() {
  local i fifo=$(mktemp -u) port=${1:-1055} line response_body http_code http_status nc_fails=0 ESH_TERM_AUTH_TOKEN_PASSED http_user req_path nc_rc req_body req_type post_content_length

  [ -z "$ESH_TERM_AUTH_TOKEN" ] && _esh_at
  # valid_local_auth_tokens: a list of any token that can authenticate to this
  # little web server
  local valid_local_auth_tokens=($ESH_TERM_AUTH_TOKEN)

  # set up bidirectional pipe (idea from
  # https://unix.stackexchange.com/a/227981)
  mkfifo $fifo
  ( : <$fifo & ) # avoid deadlock on opening pipe
  exec 4>$fifo 3<$fifo
  rm $fifo

  trap 'trap - RETURN INT USR1; echo "$FUNCNAME: stopping now"; exec 3>&- 4>&-; return' RETURN INT
  #trap 'echo received USR1: re-read ESH_TERM_AUTH_TOKEN now; _esh_at </dev/null' USR1
  trap 'echo received USR1; if ! env screen -X windowlist; then exit; fi' USR1
  echo "pid $$ listening on port: $port"

  while true; do
    response_body=""
    req_path="/"
    req_type=""
    req_body=""
    http_code=401
    post_content_length=""
    http_status=unauthorized
    # read each line of the http request from the listening netcat process that
    # is stdin for this "while" loop
    while read line || {
      # check if nc failed
      nc_rc=$line
      if [[ "$nc_rc" =~ ^[0-9]+$ ]] && [ $nc_rc -gt 0 ]; then
        nc_fails=$(($nc_fails+1))
        if [ $nc_fails -ge 5 ]; then
          printf "%s: too many failures, giving up\n" $FUNCNAME >&2
          read -p "press return to quit $FUNCNAME" </dev/tty
          return 1
        fi
        printf "nc fail: %s\n" $nc_rc >&2
        sleep 1
      fi
      break
    }; do
      line=${line//$'\r'/}
      if [[ "$line" =~ ^X-Escreen-Auth:\ ([^[:blank:]]+) ]]; then
        ESH_TERM_AUTH_TOKEN_PASSED=${BASH_REMATCH[1]}
        for ((i=0;i<${#valid_local_auth_tokens[@]};i++)); do
          if [ "$ESH_TERM_AUTH_TOKEN_PASSED" = "${valid_local_auth_tokens[$i]}" ]; then
            http_code=200
            http_status=OK
            break
          fi
        done
      elif [[ "$line" =~ ^X-Escreen-User:\ ([^[:blank:]]+) ]]; then
        http_user=${BASH_REMATCH[1]}
      elif [[ "$line" =~ ^(GET|POST)\ ([^[:space:]]*) ]]; then
        req_type=${BASH_REMATCH[1]}
        req_path=${BASH_REMATCH[2]}
      elif [[ "$line" =~ ^Content-Length:\ ([0-9]+) ]]; then
        post_content_length=${BASH_REMATCH[1]}
      fi
      if [ -z "$line" ]; then
        # we have reached the end of the request headers, send back the
        # response
        #
        if [ "$req_type" = POST ]; then
          read -N $post_content_length req_body
        fi
        case "$req_path" in
          /hello)
            # /hello does not require any authentication
            http_code=200
            http_status=OK
            response_body="HELLO"
            ;;
          /get-pid)
            http_code=200
            http_status=OK
            response_body="$$"
            ;;
          /set-sty)
            if [ $http_code = 200 ] && [[ "$req_body" =~ ^STY=([^[:blank:]]+) ]]; then
              STY=${BASH_REMATCH[1]}
              echo "/set-sty: new STY value: $STY"
            fi
            ;;
          /get-auth-token)
            if [ $http_code = 200 ]; then
              response_body=$ESH_TERM_AUTH_TOKEN
            fi
            ;;
          /refresh-auth-token)
            # /refresh-auth-token does not require any authentication
            http_code=200
            local old_token=$ESH_TERM_AUTH_TOKEN
            STY=$ESH_STY _esh_at
            if [ "$old_token" = $ESH_TERM_AUTH_TOKEN ]; then
              http_status="WARN_TOKEN_NOT_UPDATED"
            else
              http_status="OK_TOKEN_UPDATED"
              valid_local_auth_tokens+=($ESH_TERM_AUTH_TOKEN)
            fi
            response_body="$http_status"
            ;;
        esac
        printf "%s %s %s %s %s\n" $(date +%T) $req_path $http_code $http_status $http_user
        # IMPORTANT: send the response in 1 statement, otherwise we can get
        # deadlock
        printf 'HTTP/1.1 %s %s\r\nContent-Type: text/plain\r\nContent-Length: %s\r\nCache-Control: public, max-age=0\r\nConnection: close\r\n\r\n%s' \
          $http_code \
          $http_status \
          ${#response_body} \
          "$response_body" >&4
      fi
    done < <(nc -l 127.0.0.1 $port <&3; printf $?)
  done
}
