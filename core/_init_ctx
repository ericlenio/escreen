# vim:filetype=bash
#
# bash init string when entering new bash session (e.g. either by ssh or sudo,
# or a system call inside of vim)
#
# you can customize the environment by pre-defining a function called
# ESH_BASH_INIT
#
_init_ctx() {
  local OPTIND opts='d' opt teefile=/dev/null
  while getopts "$opts" opt; do
    case $opt in
      d) # debug
        teefile=/tmp/$FUNCNAME.log
        echo "$FUNCNAME: debug on, logfile in: $teefile" >&2
        shift
        ;;
    esac
  done
  # Args:
  #   1st is ESH_STY;
  #   p is the communication port (to BashSessionConfigServer);
  #   remaining args are positional parameters to be run in the newly
  #   initialized bash shell we are about to execute (after we init that shell
  #   with the core escreen framework), defaulting to an interactive bash
  #   session
  local ESH_STY=$1 p=$2 ex=("${@:3}") z_init_64 f fs=$(compgen -A function ESH_BASH_INIT | sort) bootstr i c1
  #declare -p $(compgen -v ESH_)
  z_init_64=$({
    if [ ${#ex[@]} = 0 ]; then
      ex+=(exec bash)
    fi
    # search ex array for "bash", and if found inject a little init script to
    # pass along ESH_TERM_AUTH_TOKEN
    local ex2=()
    for((i=0;i<${#ex[@]};i++)); do
      ex2+=("${ex[$i]}")
      if [ "${ex[$i]}" = bash ]; then
        ex2+=(--init-file '$'t$i)
        #
        # set up a temp file to pass ESH_TERM_AUTH_TOKEN (we don't want to just
        # export it, for security reasons)
        printf 't%s=$(mktemp)\n' $i
        printf '{\n'
        printf '  echo ESH_TERM_AUTH_TOKEN=%s\n' $ESH_TERM_AUTH_TOKEN
        printf '  echo "[ -t 1 ] && echo sourced $t%s"\n' $i
        #printf '  echo "exec 7< <(echo \$ESH_TERM_AUTH_TOKEN)"\n'
        printf '  echo rm $t%s\n' $i
        printf '} >$t%s\n' $i
        #
        # possible better method: use process substitution instead of a temp
        # file: does not work on u8 though, and you have to deal with unquoting
        # it, something like:
        # --init-file "<(echo ESH_TERM_AUTH_TOKEN=$ESH_TERM_AUTH_TOKEN)"
      fi
    done
    ex=("${ex2[@]}")
    declare -p ESH_TMP ESH_STY ESH_USER ESH_TERM_PID ESH_VERSION ex
    declare -f _esh_e _esh_b _esh_l _esh_i _esh_y
    printf 'ESH_TERM_AUTH_TOKEN=%s ESH_PORT=%s _esh_i %s ESH_PORT </dev/null\n' $ESH_TERM_AUTH_TOKEN $p $ESH_STY
    # layer in all current shell functions with function name prefix
    # "ESH_BASH_INIT": execute them in order (by function name) in our new
    # shell
    for f in $fs; do
      declare -f $f
      echo $f
    done
    # scan the ex array for any items that start with '$', if found then we
    # assume we need to eval the array element
    for ((i=0;i<${#ex[@]};i++)); do
      c1=${ex[$i]:0:1}
      if [ "$c1" = "$" ]; then
        printf 'eval ex[%s]="${ex[%s]}"\n' $i $i
      fi
    done
    # the bash environment is now initialized and ready for an interactive user
    # session (or, run whatever command is in the ex array)
    #
    # user will interact with $SSH_TTY if detected (else gnu screen will not
    # work inside ssh sessions to openbsd), else just use /dev/tty
    #echo '"${ex[@]}" <>${SSH_TTY:-/dev/tty}'
    echo '"${ex[@]}"'
  } | gzip -9c | openssl enc -a)

  #bootstr='echo $* | tr -d " " | openssl enc -d -a -A | gzip -dc | exec bash'
  #printf 'echo %s | openssl enc -d -A -a | exec sh -s -- ' $(echo "$bootstr" | openssl enc -a -A)

  #bootstr='eval "$(echo $* | tr -d \" \" | openssl enc -d -a -A | gzip -dc)";exec bash'
  #printf $'exec bash -c $\x27%s\x27 -- "$@" ' ${bootstr// /\\x20}

  #
  # things to check if tweaking these commands:
  # 1. works when ssh-ing
  # 2. works when ssh-ing to an account with a default shell this is NOT bash
  # 3. "s" (sudo) shell func works
  # 4. "-ra" remoteadmin tool ssh to host
  #   a. _ra_ssh ltc.admitplus.work
  #   b. _ra_ssh -c ltc.admitplus.work
  #   c. _ra_ssh ltc.admitplus.work uname -a
  #   d. _ra_ssh -c ltc.admitplus.work uname -a
  #   e. ra_promote
  bootstr='a=$*;eval "$(echo ${a// /} | openssl enc -d -a -A | gzip -dc | tee '$teefile')"'
  printf "exec bash -c '%s' -- " "$bootstr"
  echo $z_init_64
}
export -f _init_ctx
