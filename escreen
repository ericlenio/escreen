#! /usr/bin/env bash
set -e

if [ "$1" = -r ]; then
  if [ -z "$ESH_AT" ]; then
    echo "Oops, you do not appear to already be in an escreen session, exiting."
    exit 1
  fi
  curr_sty=${STY:-some_value}
  screen_stys=($(env screen -ls | grep -v $curr_sty | perl -n -e 's{^\s*(\d+\.\S+).*}{$1} && print'))
  if [ ${#screen_stys} = 0 ]; then
    echo "No escreen sessions detected."
    exit 1
  fi
  printf "Resume which escreen session?\n"
  i=0
  IFS='\n' env screen -ls | grep -v $curr_sty | perl -n -e 's{^\s*(\d+\..*)}{$1} && print' | while read l; do
    printf "%s. %s\n" $i "$l"
    i=$(($i+1))
  done
  read -p "Enter choice: " choice
  if [ "$choice" -a ${screen_stys[$choice]+is_set} ]; then
    sty=${screen_stys[$choice]}
    env screen -S $sty -X screen bash -c "_esh_b forwardEscreen $ESH_PORT $ESH_AT $(echo -n $ESH_NC|openssl enc -A -base64)"
    env screen -S $sty -X escape ^ee
    env screen -d -r $sty
    env screen -S $sty -X screen bash -c "_esh_b unforwardEscreen"
    exit
  else
    echo "Invalid choice."
    exit 1
  fi
fi
#
# get/set the main communications port, and other environment variables
#
# if 0 args: cat out current file
#
# if 1 arg:
#   arg is -f: echo the name of file
#
#   arg is a plus sign followed by a variable name: append this variable to the
#   file (as a new "declare" statement)
#
#   arg is any other value: arg is assumed to be a new ESH_STY value to be used
#   in the new file name, and we copy variables from old file to new file
#
# if 2+ args:
# 1st arg: $ESH_STY value
# all remaining args: names of variables to be saved to file
#
_esh_e() {
  local s=${1:-$ESH_STY} n v f
  # little nested function here to derive name of file to stash environment
  # vars
  F() {
    printf "%s/STY-%s.env" $ESH_TMP $1
  }
  f=$(F $s)
  case $# in
    0)
      cat $f
      ;;
    1)
      case $1 in
        -f)
          F $ESH_STY
          ;;
        +*)
          # strip leading plus sign, we should be left with a variable name
          n=${1#+}
          eval v=\$$n
          # append var name and value to the file
          echo "declare $n='$v'" >> $(F $ESH_STY)
          ;;
        *)
          cat $(F $ESH_STY) > $f
          echo wrote $f: $(cat $f) 1>&2
          ;;
      esac
      ;;
    *)
      shift
      rm -f $f && touch $f && {
        while [ $# -gt 0 ]; do
          n=$1
          shift
          eval v=\$$n
          echo "declare $n='$v'" >> $f
        done
        echo wrote $f: $(cat $f) 1>&2
      }
  esac
}
export -f _esh_e

# bootstrapping function: 1st arg is an event ID that the server will inspect
# and run appropriate event handler for; event IDs starting with "z" send back
# a gzip'd response from the server.
#_esh_b() {
  #exec 3<>/dev/tcp/localhost/$ESH_PORT
  #echo $ESH_AT "$*" >&3
  ## Send stdin of this function to esh server (like with cp2cb). This next
  ## cat may show "Resource temporarily unavailable" under certain
  ## conditions, if so generally just set stdin of caller to </dev/null.
  #[ ! -t 0 ] && cat >&3
  #[ ${1:0:1} = z ] && gzip -d -c <&3 || cat <&3
  #exec 3<&- 3>&-
#}
# older shells may not be able to do the /dev/tcp/host/port trick, this works
# around that ... netcat will be needed though
_esh_b() {
  eval $(_esh_e)
  {
    echo $ESH_AT "$*"
    # must unbuffer output for large file downloads ... "sed -u" not
    # compatible with OSX though
    #[ ! -t 0 ] && sed -u ''
    [ ! -t 0 ] && perl -pe 'BEGIN{$|=1}'
  } | \
  $ESH_NC localhost $ESH_PORT | {
    [ ${1:0:1} = z ] && gzip -d -c || cat
  }
}
export -f _esh_b


# load a bash function into the session: first try using cached version,
# re-uploading if it is out of date (or non-existent). Args:
# 1: full pathname to cached file
# 2: optional: password (just be sure to pass a known valid password)
# 3: optional: if non-zero length, just echo the cached file; default is
# to eval it
_esh_l() {
  local f=$1 c p o
  export p=$([ "$2" ] && echo $2 || echo $(_esh_b fpw ${f/*.}))
  # https://cryptosense.com/weak-key-derivation-in-openssl/
  o="openssl enc -a -aes256 -pass env:p"
  # try to use the cached file first ...
  [ -f $f ] && 
    c="$($o -d -in $f 2>/dev/null)" &&
    # check for 16 byte header block injected by server: integrity check for
    # #16
    [[ "$c" =~ ^0000000000000000 ]] || {
    # cached file does not exist or is expired, or failed integrity check so
    # re-cache it
    echo -n "up:${f/*.} " >&2
    c="$(_esh_b zup ${f/*.})"
    echo ${#c} bytes >&2
    echo "$c" | $o >$f
    chmod 666 $f
  }
  # strip out 16 byte header block for integrity check
  c=${c:16}
  [ -z "$3" ] && eval "$c" || echo "$c"
}
export -f _esh_l

# ESH_AT is a simple security access token
export ESH_AT=$(openssl rand 3 -hex)
export ESH_HOME=$(dirname $(perl -MCwd -e 'print Cwd::abs_path shift' $0))
[ -z "$ESH_TMP" ] && {
  escreen_branch=$(cd $ESH_HOME && git rev-parse --abbrev-ref HEAD)
  suffix=-$escreen_branch
  [ $escreen_branch = master ] && suffix=""
  ESH_TMP=/tmp/esh$suffix
}
export ESH_TMP
[ ! -d $ESH_TMP ] && mkdir $ESH_TMP && chmod 1777 $ESH_TMP
export ESH_USER=$USER

# shell init script here
_esh_i() {
  local i=$HOME/.escreen_profile
  [ -f $i ] && . $i
  local t=$ESH_TMP u=$ESH_USER f=$(_esh_e -f)
  [ ! -d $t ] && mkdir $t && chmod 1777 $t
  # only write out ESH_STY file if we are NOT in a sudo session
  #[ -z "$SUDO_USER" ] && _esh_e "$@"
  # ... actually, write it out if it does not exist
  [ ! -f $f ] && {
    _esh_e "$@"
    nohup sh -c "while kill -0 $$; do sleep 5; done; f=$(_esh_e -f); rm -f \$f*" </dev/null >/dev/null 2>&1 &
  }
  ESH_NC="nc -q -1"
  # test if -q is supported with nc, due to 
  # https://bugs.launchpad.net/ubuntu/+source/netcat-openbsd/+bug/544935
  # we need it on newer ubuntu systems
  [ "$(nc -q -1 -z localhost 1 2>&1)" ] && ESH_NC="nc"
  # p0, p1, p2 are set by fpw call
  local $(_esh_b fpw cbf)
  _esh_l $t/$u.core $p0
  for f in $(_esh_l $t/$u.fcnlist $p1 1); do
    _esh_gen_stub $t/$u.f.$f
  done
  export ESH_AT ESH_TMP ESH_STY ESH_NC SHELL=$(which bash)
  export -f _esh_e _esh_i _esh_b _esh_l
  # generate vim executable so it is ready for user, e.g. if escreen starts and
  # then immediately:
  #   s nobody
  #   fc
  _vime
}

export -f _esh_i

ESH_CORE=$ESH_HOME/core
[ "$1" ] && ESH_PROFILE="$1" || ESH_PROFILE=$ESH_HOME/profile.lwprof

# ESH_STY is conceptually tied to screen's STY variable ... it gets used as a
# unique ID to properly track the communications port (ESH_PORT) to use in a
# given shell between various combinations of screen, sudo, and ssh
export ESH_STY=$$

exec node $ESH_HOME/main.js $ESH_PROFILE
