# vim:filetype=sh
screen() {
  # see if -r or -R was passed, if so just invoke screen with the current arg list "as is"
  local origArgs=("$@")
  # NOTE: cannot set OPTS in 1 line, it strips the return value from the subshell
  local OPTS
  # This checks that -r or -R have a supplied value, and allows -ls and -d to
  # pass through
  OPTS=$(getopt -o lsdr:R: -- "$@") || return
  eval set -- "$OPTS"
  while true; do
    case "$1" in
      -r|-R)
        /usr/bin/screen "${origArgs[@]}"
        return
        ;;
      --) shift; break ;;
      *) shift ;;
    esac
  done
  local shell=$ESH_TMP/$USER.screen.shell
  touch $shell
  chmod 700 $shell
  echo '#!/bin/sh
exec /bin/bash --norc --noprofile -s -- "$PS1" "$@" << '"'"EOF"'"'
export PS1="$1"
shift
export ESH_STY=${STY%%.*}
eval "$(_esh_b zI </dev/null)" </dev/null
exec /bin/bash --norc --noprofile "$@" </dev/tty
EOF
' > $shell
  local SCREENRC=$ESH_TMP/$USER.screenrc
  # Set up a little macro so that ^a% will dump the current screen to a file,
  # then edit it in vim.
  local printscreen_macro=$ESH_TMP/$USER.screenrc.printscreen
  local hardcopy_file=$ESH_TMP/$USER.screenrc.hardcopy
  touch $SCREENRC $printscreen_macro $hardcopy_file
  chmod 600 $SCREENRC $printscreen_macro $hardcopy_file
  export SCREENRC
  cat > $SCREENRC << 'EOF'
startup_message off
bind " " windowlist -b
vbell on
vbell_msg DING
#shelltitle "$ |bash:"
bindkey "\032" stuff "\032"
caption always "%{= kw}%-w%{= BW}%n%t%{-}%+w %-= @%H %m/%d %c"
shelltitle "$ |:"
defmonitor on
#setenv PROMPT_COMMAND 'screen_prompt'
#shell $shell
#screen rm $SCREENRC
EOF
  cat >> $SCREENRC << EOF
bind % source $printscreen_macro
EOF
  cat > $printscreen_macro << EOF
hardcopy_append off
hardcopy $hardcopy_file
screen bash -c "vim $hardcopy_file"
EOF

  local esc='^Ee'
  if [ -z "$ESH_STY" ]; then
    esc='^Aa'
  fi
  /usr/bin/screen -e$esc -s $shell "${origArgs[@]}"
}
export -f screen
