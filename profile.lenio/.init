# vim:filetype=expect

proc paste_from_clipboard_in_vim {} {
  global OS PROMPT ANSI_RE_SHOW_CURSOR
  send ":shell\r"
  expect -re $PROMPT
  # encode the clipboard data and send it across the wire, decoding it on the
  # other end, and store it in the VIM_CLIPBOARD file. Leading space before
  # commands so as to not save them to history
  send " exec 3> >(/usr/bin/openssl enc -base64 -d | gzip -d -c > \$VIM_CLIPBOARD)\r"
  send { while true; do read -d' ' l; [ "$l" = . ] && break; printf "%s\n" $l >&3; printf "\015"; done; exec 3>&-}
  send \r
  expect -re \r\n$
  if { "$OS" == "Linux" } {
    set buf [exec clipit -c | gzip -9 -c | /usr/bin/openssl enc -base64]
  } elseif { "$OS" == "Darwin" } {
    set buf [exec pbpaste | gzip -9 -c | /usr/bin/openssl enc -base64]
  }
  foreach line [split $buf] {
    send "[string trimright $line] "
    expect {
      -re "\x0d$" {}
      timeout { send_error "TIMEOUT in paste_from_clipboard_in_vim"; return }
    }
  }
  send ". "
  expect ". "
  expect -re $PROMPT
  send " exit\r"
  expect {
    -re $ANSI_RE_SHOW_CURSOR {
      # read the file and put it in the unnamed register
      send {:let @"=join(readfile($VIM_CLIPBOARD,"b"),"\n")}
      send "\r"
      expect {
        -re $ANSI_RE_SHOW_CURSOR {
          # paste contents of unnamed register
          send ":if col(\"\$\")-col(\".\")==1 | call feedkeys(\"p\") | else | call feedkeys(\"P\") | endif\r"
        }
        -re {has changed since editing started.*\(L\)oad File: $} {}
        timeout {send_error "TIMEOUT #1 during paste, aborting"; return}
      }
    }
    -re {has changed since editing started.*\(L\)oad File: $} {}
    timeout {send_error "TIMEOUT #2 during paste, aborting"; return}
  }
}
_ES_register_marker VIM_PASTE_CLIPBOARD paste_from_clipboard_in_vim

proc ldsupport_pw_handler {encoded_args} {
  if { [catch {
    array set args [exec sh -c "printf '%s\n' \"\$0\" | /usr/bin/openssl enc -base64 -d | gzip -d -c" $encoded_args]
  } err] } {
    send_error "ERROR decoding: $err\n\r"
    send_error "encoded_args=$encoded_args\n\r"
  } else {
    process_ldsupport_request $args(ld_url) $args(enc_pass)
  }
}
_ES_register_marker LDSUPPORT_PW ldsupport_pw_handler

proc process_ldsupport_request {ld_url enc_pass} {
  global LD_SUPPORT_BASIC_AUTH PROMPT OS
  set url https://svn.lincware.com/lw/ldsupportpw
  catch {
    set ld_support_pw [exec curl -s -H "Authorization: Basic $LD_SUPPORT_BASIC_AUTH" --data "$enc_pass" $url]
  } ld_support_pw
  expect -re $PROMPT
  if { [regexp {^[-\w]+$} $ld_support_pw] } {
    send " echo password is: $ld_support_pw\r"
    expect -re $PROMPT
    if { "$OS" == "Linux" } {
      exec sh -c "printf '%s' \"\$0\" | clipit 2>&1" $ld_support_pw
      system xdg-open $ld_url >/dev/null &
    } elseif { "$OS" == "Darwin" } {
      exec sh -c "printf '%s' \"\$0\" | pbcopy 2>&1" $ld_support_pw
      system open $ld_url &
    }
  } else {
    send_error "ERROR: could not read ldsupport password: further info: $ld_support_pw"
  }
}
