Files in the profile:

* .init: expect commands sourced at initialization time
* *.exp: more expect commands that get sourced just after .init
* any filename matching ^\w+ is assumed to be bash commands
  that usually, but not necessarily, define a bash function of the same name.
  A stub shell function of the same name is the file is created when the bash
  shell starts. When the user runs one, that file is uploaded, cached to
  EXPECTSSH_TMPDIR in an encrypted format, and sourced.  A new shell will
  always first try to re-use the cached file, if it does not exist or the md5
  checksum fails it will get re-uploaded to the cache.

Markers/handlers: each marker is a small pattern (like ~@12:) that the main
expect loop will detect and then trigger the marker's handler.

Markers invoke handlers by using the _ES_send_marker bash function like so:

  marker=$(_ES_marker MARKER_HUMAN_FRIENDLY_NAME)
  _ES_send_marker "$marker" "any paramaters here ..."


Handlers can utilize the following global variables:
* OS
* PROMPT
* EXPECTSSH_TMPDIR
* EXPECTSSH_PROFILE
* EXPECTSSH_FUNCTIONS_DIR
* EXPECTSSH_LOADED_FUNCS

A handler can expect a single arg to be passed to it, which is 
a gzip'd, base64'd string of parameters. It is up to 

Bash command files can use the following helper functions:
* _ES_marker

If a bash command file has a dependency on another command file to be loaded
first, add a comment line like this in the file with the dependency:
# depends:some_other_bash_command_file

Expect files can use the following helper functions:
* _ES_register_marker

Handlers should not have a return value, else the procedure that invokes the
handler will flag it as an error.
