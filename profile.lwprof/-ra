# vim:filetype=bash
#
# Usage: remoteadmin [filter] [command ...]
# where filter is used as a simple search filter against all currently
# connected VMs. The user is prompted to pick the VM from a list and further
# prompted to run either ssh or sftp to that VM.
#
# If a command is given we assume it is to be run on the remote VM identified
# by the filter (and the assumption is that the filter will match on exactly 1
# VM).
#
# Programmer note: this script is designed to work on Linux, Cygwin, and Mac OS
# X. So do not use any obscure syntax or 3rd party tools which may not exist in
# some environments, e.g., Mac OS X's bash does not support associative arrays.
#
# Set these environment variables as necessary (defaults in parens)
# RA_SERVER_BASE_URL (https://remoteadmin.private:3333)
# RA_SSH_USER (lincdoc)
# RA_USER ($LOGNAME)
#
#exec > >(tee >(grep ^: >$cmds) | grep -v ^:)
#trap "rm -f $stdout $cmds; echo $stdout was deleted" EXIT INT

-ra() {
  local exec ssh_params opts="he:u:j:drp" opt RA_SERVER_BASE_URL=${RA_SERVER_BASE_URL:-https://remoteadmin.private:3333} RA_SSH_USER=${RA_SSH_USER:-lincdoc} OPTIND=1 PATH="/usr/local/opt/curl/bin:$PATH"
  declare -a exec
  declare -a ssh_params
  local ssh_params_file=$HOME/.remoteadmin/ssh_options filter RA_SSH_PROXY_JUMP_HOST RA_MODE=ssh superuser=0
  local appCtx raAgentId

  usage() {
    echo "Usage: -ra [-hdr] [filter [ssh args ...]]"
    echo "       -ra [-d] -p [filter [psql args ...]]"
    echo "  -h: this usage note"
    echo "  -d: use dev remoteadmin server"
    echo "  -r: in ssh mode (the default), ssh to the remote server as root; in psql mode, connect with the owner of the ld_admin schema"
    echo "  -p: psql mode"
  }

  while getopts $opts opt; do
    case $opt in
      h) usage
        return
        ;;
      e) RA_SERVER_BASE_URL=$OPTARG
        echo "NOTE: using endpoint base: $RA_SERVER_BASE_URL" >/dev/tty
        ;;
      u) RA_USER_OVERRIDE=$OPTARG
        echo "NOTE: using RA_USER: $RA_USER_OVERRIDE" >/dev/tty
        ;;
      d) RA_SERVER_BASE_URL=${RA_SERVER_BASE_URL/%:3333/:3001}
        echo "NOTE: using dev RA server at: $RA_SERVER_BASE_URL" >/dev/tty
        ;;
      r) RA_SSH_USER=root
        superuser=1
        ;;
      p) RA_MODE=psql
        ;;
    esac
  done
  filter=${!OPTIND}
  [ $OPTIND -gt $# ] && shift $# || shift $OPTIND
  if [ -z "$filter" ]; then
    filter="."
  fi
  if [[ "$filter" =~ ^(([^:]+):)(([_[:alnum:]]+))$ ]]; then
    raAgentId=${BASH_REMATCH[2]}
    filter=$raAgentId
    appCtx=${BASH_REMATCH[4]}
  fi
  if ! [[ $RA_SERVER_BASE_URL =~ ://([-\.[:alnum:]]+) ]]; then
    echo "could not parse RA_SSH_PROXY_JUMP_HOST from endpoint: $RA_SERVER_BASE_URL" >&2
    return 1
  fi
  RA_SSH_PROXY_JUMP_HOST=${BASH_REMATCH[1]}

  get_extra_ssh_params() {
    local hostname=$(echo $1 | tr "[:upper:]" "[:lower:]")
    local hostname2
    local line
    if [ -f $ssh_params_file ]; then
      while read -r line; do
        if [[ $line =~ ^([-\.[:alnum:]]+)=(.+) ]]; then
          hostname2=$(echo ${BASH_REMATCH[1]} | tr "[:upper:]" "[:lower:]")
          if [ ${hostname} = ${hostname2} ]; then
            printf %s "${BASH_REMATCH[2]}"
            return
          fi
        fi
      done < $ssh_params_file
    fi
  }

  eval "$(_esh_e)"
  if [ "$RA_USER_OVERRIDE" ]; then
    RA_USER=$RA_USER_OVERRIDE
  fi

  if [ -z "$RA_USER" ]; then
    read -p "What is your remoteadmin username? " RA_USER </dev/tty
    [ -z "$RA_USER" ] && return 1
    read -p "Confirm: username is \"$RA_USER\" (y/n, default is y)? " yesno </dev/tty
    [ "$yesno" -a "$yesno" != y ] && return
    _esh_e +RA_USER
  fi

  #local pwkey="LincWare LDAP:$RA_USER"
  #local pw=$(pw "$pwkey")
  attempts=0
  if [ -z "$RA_USER_PASSWORD_64" ]; then
    _esh_b about
  fi
  if [ -z "$RA_USER_PASSWORD_64" ]; then
    echo "$FUNCNAME: could not acquire RA_USER_PASSWORD_64" >&2
    return 1
  fi
  if ! pw=$(echo "$RA_USER_PASSWORD_64" | openssl enc -d -a -A); then
    echo "$FUNCNAME: could not acquire password" >&2
    return 1
  fi
  local raw agents auth=$(printf "%s:%s" "$RA_USER" "$pw" | openssl enc -a -A)
  local auth_hdr=$(printf "Authorization: Basic %s" $auth)
  local endpoint=$RA_SERVER_BASE_URL/ra-get-agents?superuser=$superuser
  if ! [[ $RA_SERVER_BASE_URL =~ ://([-\.[:alnum:]]+) ]]; then
    echo "could not parse hostname from endpoint: $RA_SERVER_BASE_URL" >&2
    return 1
  fi

  local agt_id=${BASH_REMATCH[1]}/127.0.0.1
  if ! raw=$(curl -k -S -s -f -H "Accept: text/plain" -H "$auth_hdr" -H "X-Ra-Agent-Id: $agt_id" $endpoint); then
    echo "$FUNCNAME: failed to read $endpoint" >&2
    return 1
  fi
  IFS=$'\n' read -d '' -a agents <<< "$raw"

  local matching=() header=() raAgentIdIdx agent=()
  IFS='|' read -a header <<< "${agents[0]}"

  get_header_idx() {
    local i
    for ((i=0;i<${#header[@]};i++)); do
      if [ ${header[$i]} = $1 ]; then
        echo $i
        return
      fi
    done
    return 1
  }

  if ! raAgentIdIdx=$(get_header_idx raAgentId); then
    echo "$FUNCNAME: failed to get raAgentIdIdx" >&2
    return 1
  fi

  for ((i=1;i<${#agents[@]};i++)); do
    agent=(${agents[$i]})
    raAgentId=${agent[$raAgentIdIdx]}
    if [[ $raAgentId =~ $filter ]]; then
      matching+=("${agents[$i]}")
    fi
  done

  if [ ${#matching[@]} -eq 0 ]; then
    echo "$FUNCNAME: no matches for filter: $filter" >&2
    return 1
  fi

  get_data() {
    local i j data
    IFS='|' read -a data <<< "${matching[$1]}"
    for ((j=0;j<${#header[@]};j++)); do
      printf "%s=%s;" ${header[$j]} "${data[$j]}"
    done
  }

  fmt_date() {
    epoch_seconds=$1 os=$(uname -s) fmt="%m/%d %H:%M:%S"
    case $os in
      Darwin|OpenBSD)
        date -r $epoch_seconds +"$fmt"
        ;;
      Linux)
        date --date=@$epoch_seconds +"$fmt"
        ;;
    esac
  }

  local n=$((${#matching[@]}-1)) choice=0
  if [ $n -ge 1 ]; then
    local choice_list=$(
      for ((i=0;i<=$n;i++)); do
        eval "$(get_data $i)"
        dt=$(fmt_date $createTimestamp)
        printf "%s (%s)\n" $raAgentId "$dt"
      done
    )
    choice=$(-pick-something "Pick:" "$choice_list" 1) || {
      echo "invalid choice"
      return 1
    }
  fi

  #get_data $choice
  eval "$(get_data $choice)"

  case $RA_MODE in
    ssh)
      local extra_params="$(get_extra_ssh_params $raHostname)" cookie_jar=$HOME/.remoteadmin/ra-cookies
      if [ ! -f $cookie_jar ]; then
        touch $cookie_jar
        chmod 600 $cookie_jar
      fi
      if [ -n "$extra_params" ]; then
        echo "Passing extra params to ssh: $extra_params"
      fi
      if \
        curl -k -f -s -S -b "$cookie_jar" -c "$cookie_jar" -H "X-Ra-Session-Request: 1" -H "$auth_hdr" $RA_SERVER_BASE_URL/ra-simple-login \
        && \
        c=($(curl -k -f -s -S -b "$cookie_jar" -H "$auth_hdr" -H "X-Ra-Agent-Id: $raAgentId" $RA_SERVER_BASE_URL/ra-get-shell-ctx))
        then
        SSH_STY_LBL=$raHostname ssh -t -oProxyJump=remoteadmin@$RA_SSH_PROXY_JUMP_HOST -p $raSshPort $extra_params "$@" $RA_SSH_USER@127.0.0.1 "${c[@]}" exec bash
#echo sshConfigFile:$sshConfigFile
#SSH_STY_LBL=$raHostname ssh -oProxyJump=remoteadmin@$RA_SSH_PROXY_JUMP_HOST:2999 -p $raSshPort $extra_params "$@" $RA_SSH_USER@ra-local "${c[@]}" exec bash
#env ssh -p 2999 remoteadmin@$RA_SSH_PROXY_JUMP_HOST ssh -F $sshConfigFile $extra_params "$@" $RA_SSH_USER@127.0.0.1 "${c[@]}" exec bash
#ssh -t -p 2999 remoteadmin@$RA_SSH_PROXY_JUMP_HOST ssh -F $sshConfigFile $extra_params "$@" $RA_SSH_USER@127.0.0.1
      fi
      ;;
    psql)
      choice=0
      n=$((${#context[@]}-1))
      if [ $n -ge 1 ]; then
        if [ -z "$appCtx" ]; then
          local choice_list=$(
            for ((i=0;i<=$n;i++)); do
              printf "%s (%s/%s/%s)\n" ${context[$i]} ${ldVersion[$i]} ${database[$i]} ${username[$i]}
            done
          )
          choice=$(-pick-something "Pick:" "$choice_list" 1) || {
            echo "invalid choice" >&2
            return 1
          }
        else
          choice=-1
          for ((i=0;i<=$n;i++)); do
            if [ ${context[$i]} = $appCtx ]; then
              choice=$i
              break
            fi
          done
          if [ $choice -lt 0 ]; then
            echo "no such context: $appCtx" >&2
            echo "available contexts: ${context[*]}" >&2
            return 1
          fi
        fi
      fi
      appCtx=${context[$choice]}
      export PGDATABASE=${database[$choice]}
      export PGUSER=${username[$choice]}
      #export PGHOST=${host[$choice]}
      export PGHOST=127.0.0.1
      export PGSSLMODE=require
      export PGPORT=${port[$choice]}
      export PGOPTIONS="-c lw.raAgentId=$raAgentId/$appCtx}"
      export PGPASSWORD="$(echo ${password[$choice]} | openssl enc -d -a -A)"
      ssh -fN -L127.0.0.1:$PGPORT:127.0.0.1:$PGPORT ${host[$choice]}
      psql -v PROMPT1="$raHostname:%n@%/>" "$@"
      # do I need to stop ssh?
      ;;
  esac
}
