# vim:filetype=sh
#
# Usage: remoteadmin [filter] [command ...]
# where filter is used as a simple search filter against all currently
# connected VMs. The user is prompted to pick the VM from a list and further
# prompted to run either ssh or sftp to that VM.
#
# If a command is given we assume it is to be run on the remote VM identified
# by the filter (and the assumption is that the filter will match on exactly 1
# VM).
#
# Programmer note: this script is designed to work on Linux, Cygwin, and Mac OS
# X. So do not use any obscure syntax or 3rd party tools which may not exist in
# some environments, e.g., Mac OS X's bash does not support associative arrays.
#
# Set these environment variables as necessary (defaults in parens)
# RA_SERVER_BASE_URL (https://remoteadmin.private:3333)
# RA_SSH_USER (lincdoc)
# RA_USER ($LOGNAME)
#
#exec > >(tee >(grep ^: >$cmds) | grep -v ^:)
#trap "rm -f $stdout $cmds; echo $stdout was deleted" EXIT INT

-ra() {
  local exec ssh_params opts="he:u:j:dr" opt RA_SERVER_BASE_URL=${RA_SERVER_BASE_URL:-https://remoteadmin.private:3333} RA_SSH_USER=${RA_SSH_USER:-lincdoc} OPTIND=1
  declare -a exec
  declare -a ssh_params
  local ssh_params_file=$HOME/.remoteadmin/ssh_options filter RA_SSH_PROXY_JUMP_HOST

  usage() {
    echo "Usage: -ra [-hdr] [filter [ssh args ...]]"
    echo "  -h: this usage note"
    echo "  -d: use dev remoteadmin server"
    echo "  -r: ssh to the remote server as root"
  }

  while getopts $opts opt; do
    case $opt in
      h) usage
        return
        ;;
      e) RA_SERVER_BASE_URL=$OPTARG
        echo "NOTE: using endpoint base: $RA_SERVER_BASE_URL" >/dev/tty
        ;;
      u) RA_USER_OVERRIDE=$OPTARG
        echo "NOTE: using RA_USER: $RA_USER_OVERRIDE" >/dev/tty
        ;;
      d) RA_SERVER_BASE_URL=${RA_SERVER_BASE_URL/%:3333/:3001}
        echo "NOTE: using dev RA server at: $RA_SERVER_BASE_URL" >/dev/tty
        ;;
      r) RA_SSH_USER=root
        echo "NOTE: trying for root access" >/dev/tty
        ;;
    esac
  done
  filter=${!OPTIND}
  [ $OPTIND -gt $# ] && shift $# || shift $OPTIND
  if [ -z "$filter" ]; then
    filter="."
  fi
  if ! [[ $RA_SERVER_BASE_URL =~ ://([-\.[:alnum:]]+) ]]; then
    echo "could not parse RA_SSH_PROXY_JUMP_HOST from endpoint: $RA_SERVER_BASE_URL" >&2
    return 1
  fi
  RA_SSH_PROXY_JUMP_HOST=${BASH_REMATCH[1]}

  get_extra_ssh_params() {
    local hostname=$(echo $1 | tr "[:upper:]" "[:lower:]")
    local hostname2
    local line
    if [ -f $ssh_params_file ]; then
      while read -r line; do
        if [[ $line =~ ^([-\.[:alnum:]]+)=(.+) ]]; then
          hostname2=$(echo ${BASH_REMATCH[1]} | tr "[:upper:]" "[:lower:]")
          if [ ${hostname} = ${hostname2} ]; then
            printf %s "${BASH_REMATCH[2]}"
            return
          fi
        fi
      done < $ssh_params_file
    fi
  }

  eval "$(_esh_e)"
  if [ "$RA_USER_OVERRIDE" ]; then
    RA_USER=$RA_USER_OVERRIDE
  fi

  if [ -z "$RA_USER" ]; then
    read -p "What is your remoteadmin username? " RA_USER
    [ -z "$RA_USER" ] && return 1
    read -p "Confirm: username is \"$RA_USER\" (y/n, default is y)? " yesno
    [ "$yesno" -a "$yesno" != y ] && return
    _esh_e +RA_USER
  fi

  #local pwkey="LincWare LDAP:$RA_USER"
  #local pw=$(pw "$pwkey")
  local pw=$(_esh_y _ra_get_ldap_pw | openssl enc -d -a -A)
  [ -z "$pw" ] && {
    echo "Could not retrieve password for \"$RA_USER\" to launch remoteadmin" >&2
    return 1
  }
  local vmjson auth=$(printf "%s:%s" "$RA_USER" "$pw" | openssl enc -a -A)
  local auth_hdr=$(printf "Authorization: Basic %s" $auth)
  local endpoint=$RA_SERVER_BASE_URL/ra-get-agents
  vmjson=$(curl -k -S -s -f -H "$auth_hdr" $endpoint)
  local rc=$?
  if [ $rc -gt 0 ]; then
    echo "Failed to read $endpoint"
    return 1
  fi
  #local matching_indices=$(jq -c "[.[] | .hostname | test(\".*$filter.*\";\"i\")] | indices(true)" <<<$vmjson)
  local matching=$(node - "$vmjson" "$filter" << 'EOF'
var agents=JSON.parse(process.argv[2]);
var filter=new RegExp(process.argv[3],"i");
agents.map(function(agent,idx) {
  if (agent.raHostname.search(filter)>=0) {
    var ts=new Date(agent.createTimestamp).toLocaleString();
    console.log("hostname=%s ip=%s ssh_port=%s back_port=%s create_ts='%s'",
      agent.raHostname,agent.remoteAddress,
      agent.raSshPort,agent.raBackPort,ts);
  }
});
EOF
)

  if [ ! "$matching" ]; then
    echo "no matches for filter: $filter"
    return 1
  fi

  get_vm_data() {
    local key=$1
    local l
    echo "$matching" | while read l; do
      eval "$l"
      echo "'${!key}'"
    done
  }

  local hostnames ips create_ts ssh_ports back_ports
  eval hostnames=($(get_vm_data hostname)) choice=0
  eval ips=($(get_vm_data ip))
  eval create_ts=($(get_vm_data create_ts))
  local n=$((${#hostnames[@]}-1))
  if [ $n -ge 1 ]; then
    local choice_list=$(
      for ((i=0; i<=$n; i++)); do
        printf "%s/%s (%s)\n" ${hostnames[$i]} ${ips[$i]} "${create_ts[$i]}"
      done
    )
    choice=$(-pick-something "Pick:" "$choice_list" 1) || {
      echo "invalid choice"
      return 1
    }
  fi
  eval ssh_ports=($(get_vm_data ssh_port))
  local ssh_port=${ssh_ports[$choice]}
  local hostname=${hostnames[$choice]}
  eval back_ports=($(get_vm_data back_port))
  local back_port=${back_ports[$choice]}
  local ip=${ips[$choice]}
  local extra_params="$(get_extra_ssh_params $hostname)"
  if [ -n "$extra_params" ]; then
    echo "Passing extra params to ssh: $extra_params"
  fi

  #chroot_dir=/var/remoteadmin-chroot/443
  #ssh_config=/home/remoteadmin/ssh-files/ra-agent-ssh-config-$ssh_port
  #cp_file=/home/remoteadmin/ssh-files/ra-agent-controlpath-$ssh_port

  #SSH_STY_LBL=$hostname ssh -t -oProxyCommand="env ssh ra.lincware.com sudo chroot -u remoteadmin $chroot_dir ssh -v -F $ssh_config %r@127.0.0.1" $extra_params lincdoc@ra.lincware.com
  #SSH_STY_LBL=$hostname ssh -t -oProxyCommand="env ssh ra.lincware.com sudo chroot -u remoteadmin $chroot_dir ssh -F $ssh_config -v %r@127.0.0.1 sudo sshd -i" $extra_params lincdoc@unknown
  #SSH_STY_LBL=$hostname ssh -t ra.lincware.com sudo chroot -u remoteadmin $chroot_dir ssh -F $ssh_config -v lincdoc@127.0.0.1
  #SSH_STY_LBL=$hostname ssh -vv -t -oProxyCommand="env ssh ra.lincware.com sudo chroot -u remoteadmin $chroot_dir ssh -F $ssh_config %r@127.0.0.1 sudo remoteadmin-lincdoc-sshd" $extra_params lincdoc@unknown
  #SSH_STY_LBL=$hostname ssh -t -oProxyCommand="env ssh -A remoteadmin@ra.lincware.com ssh -F $ssh_config 127.0.0.1 bash -c \"':;. .remoteadmin-shell-functions && exec sudo sshd -i'\"" $extra_params lincdoc@unknown


  my_init() {
    local a=() c=() i
    # RA_READ_PTY_FUNC is picked up by remoteadmin's _ra_read_pty function, we
    # want to override it with _esh_y
    export RA_READ_PTY_FUNC=_esh_y
    if c=($(curl -f -s -S -H "$1" -H "Content-Type: application/json" http://127.0.0.1:$2/ra-get-shell-ctx/$3/$4)); then
      for ((i=0;i<${#c[@]};i++)); do
        a+=("$(echo ${c[$i]} | openssl enc -d -a -A)")
      done
      # needed -i arg with bash in order to pass along desired PS1 value
      #a=(exec bash --norc --noprofile -i -c "${a[@]:7}" exec bash --norc --noprofile)
      eval exec "${c[@]}" exec bash <>$SSH_TTY
    fi
  }


  # create ESH_BASH_INIT (picked up by _init_ctx) with bound parameters to my_init
  #eval "ESH_BASH_INIT() { $(declare -f my_init); my_init '$auth_hdr' $back_port $hostname $ip; }"

  #SSH_STY_LBL=$hostname ssh -t -oProxyJump=remoteadmin@$RA_SSH_PROXY_JUMP_HOST -p $ssh_port $extra_params "$@" $RA_SSH_USER@127.0.0.1
  #unset -f ESH_BASH_INIT

  local c=()
  if c=($(curl -k -f -s -S -H "$auth_hdr" -H "Content-Type: application/json" $RA_SERVER_BASE_URL/ra-get-shell-ctx/$hostname/$ip)); then
    SSH_STY_LBL=$hostname ssh -t -oProxyJump=remoteadmin@$RA_SSH_PROXY_JUMP_HOST -p $ssh_port $extra_params "$@" $RA_SSH_USER@127.0.0.1 "${c[@]}" exec bash
  fi
}
