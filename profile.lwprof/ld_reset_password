# vim:filetype=sh
# Reset a user's password. Usage:
# ld_reset_password [dbname:]auth_prov/username
ld_reset_password() {
  local db_prov_auth=$1
  local default_db=lincdoc
  if [ "${db_prov_auth}" = "${db_prov_auth%%:*}" ]; then
    db_prov_auth=$default_db:$db_prov_auth
  fi
  local db=${db_prov_auth%%:*}
  local auth_prov=${db_prov_auth##*:}
  auth_prov=${auth_prov%%/*}
  local user=${db_prov_auth##*/}
  if [ -z "$db" -o -z "$user" -o -z "$auth_prov" ]; then
    echo "Usage: ld_reset_password [dbname:]auth_prov/username"
    return
  fi

  eval $(_esh_b getLdPasswordResetParams)
  if [ -z "$LD_PW_INIT_SALT" ]; then
    echo "Missing LD_PW_INIT_SALT, you may need to create LD_PW_INIT_SALT, LD_PW_SALT_SIZE, LD_PW_HASH_ALG, and LD_PW_DGST_ITERATIONS in .escreenrc"
    return
  fi

  local newpw newpw2
  read -s -p "New password: " newpw
  echo
  [ -z "$newpw" ] && return
  read -s -p "Same password again: " newpw2
  echo
  if [ "$newpw" != "$newpw2" ]; then
    echo "Passwords do not match."
    return
  fi

  echo "Generating password digest ..."
  # NOTE: this must mirror what is done in DefaultCrypt.java
  local salt=$(openssl rand -base64 $LD_PW_SALT_SIZE)
  local digest=$( ( echo $salt | openssl enc -d -base64; echo -n "$LD_PW_INIT_SALT$newpw" ) | openssl enc -base64)
  for i in $(seq 1 $LD_PW_DGST_ITERATIONS); do
    digest=$(echo $digest | openssl enc -d -base64 | openssl dgst -$LD_PW_HASH_ALG -binary | openssl enc -base64)
  done
  digest=$( ( echo $salt | openssl enc -d -base64; echo $digest | openssl enc -d -base64 ) | openssl enc -base64)

  if [ ${#digest} = 0 ]; then
    echo "Oops: digest is 0 bytes, aborting."
    return
  fi

  echo "If you see UPDATE 1, the password reset was successful."

  sudo -u postgres psql $db << EOF
  update ld_admin.ld_dbp_user set cryptpw='$digest' where provider_id='$auth_prov' and username='$user';
EOF
}
