# vim:filetype=sh
screen() {
  # make copy of original function args
  local args=("$@") opt
  # Note: escreen sends "--", that is why we skip it here
  if [ "$1" != -- ]; then
    for opt in "$@"; do
      case $opt in
        -r)
          local curr_sty=${STY:-some_value} pick_sty
          local stys=$(env screen -ls | grep -v $curr_sty | perl -n -e 's{^\s*(\d+\.\S+).*}{$1} && print')
          if [ -z "$stys" ]; then
            echo "No screen sessions detected."
            return 1
          fi
          if ! pick_sty=$(pick_something "Resume which session?" "$stys"); then
            return $?
          fi
          eval $(_esh_e)
          _esh_e $pick_sty ESH_PORT SSH_AUTH_SOCK ESH_AT
          env screen -d -r $pick_sty
          return $?
          ;;
        -d|-D|-R|-RR|-ls|-list|-Q|-v|-x|-X)
          env screen "$@"
          return $?
          ;;
      esac
    done
  fi
  # anticipitory optimization: pre-load vim, so it does not need to be loaded
  # in every screen window
  v --version >/dev/null
  local shell=$ESH_TMP/$USER.screen.shell
  touch $shell
  chmod 755 $shell
  local bashE=$(which bash) bashA="$(bash --help|grep -- --import-functions)"
  [ "$bashA" ] && bashE="$bashE $bashA"
  local caption="%{= kw}%-w%{= BW}%n%t%{-}%+w %-= @%H %{= Y}%l%{-} %m/%d %c"
  local printf_template=$(cat << 'EOF'
%s%s
# Force SHELL back to normal (freebsd workaround)
SHELL=$(which bash)
if [ "$1" = hardcopy ]; then
  hc=$(mktemp)
  m=$(mktemp)
  echo "hardcopy $hc" > $m
  echo "screen sh -c '$ESH_EDITOR $hc; rm $hc'" >> $m
  env screen -S $STY -X source $m
  rm $m
  exit
fi
[ "$STY" -a "$STY" != "$ESH_STY" ] && {
  # we are in the first window of the screen session, init some things
  #
  # setting SHELL in freebsd does not seem to work
  printf "\\033k:\\033\\134"
  env screen -S $STY -X eval \
    "setenv SHELL $SHELL" \
    "setenv ESH_STY $STY" \
    "bind / screen $ESH_EDITOR $ESH_PW_FILE" \
    "bind \\040 windowlist -b" \
    "vbell on" \
    "vbell_msg DING" \
    "defmonitor on" \
    "msgwait 3" \
    "hardstatus ignore" \
    "bind %% exec $0 hardcopy" \
    "shelltitle \\"\\$ |:\\"" \
    "caption always \\"%s\\""
  export ESH_SHELL=%s
  env screen -S $STY -X setenv ESH_SHELL $ESH_SHELL
  _esh_e $STY
  ESH_STY=$STY
  _esh_i
}
# use this trap with DEBUG signal trick to load key environment variables
# before any/all commands are run - useful for resuming screen sessions on
# remote hosts; might want to utilize $BASH_COMMAND at some point to
# conditionally call _esh_e
trap "eval \$(_esh_e)" DEBUG
%s
[ $# -eq 0 -o "$1" = "-c" ] && exec $SHELL --norc --noprofile "$@"
"$@"
EOF
)
  printf "$printf_template" '#!' $bashE "$caption" $shell "$(declare -p PS1)" > $shell
  local exec esc=^Ee

  if [ "$ESH_SCREEN_EXEC" = 1 ]; then
    esc=^Aa
    exec=exec
  fi

  # need --import-functions when on freebsd
  #env SCREENRC=$SCREENRC screen -e$esc -s $shell bash $(bash --help|grep -- --import-functions) -c "source $initfile" "${args[@]}"

  # freebsd: screen seems to completely ignore the "-s" flag, so use SHELL
  # environment var instead
  $exec env SCREENRC=/dev/null SHELL=$shell screen -e$esc "${args[@]}"
}
