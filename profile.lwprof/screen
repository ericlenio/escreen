# vim:filetype=bash
screen() {
  # make copy of original function args
  local args=("$@") opt rcfile
  # Note: escreen sends "--", that is why we skip it here
  if [ "$1" != -- ]; then
    for opt in "$@"; do
      case $opt in
        -r)
          local curr_sty=${STY:-some_value} pick_sty
          local stys=$(env screen -ls | grep -v $curr_sty | grep -vi attached | while read l; do
            if [[ "$l" =~ ^[[:blank:]]*([0-9]+\.[[:print:]]+) ]]; then
              pick_sty=${BASH_REMATCH[1]}
              t=$(mktemp)
              env screen -X -S $pick_sty screen bash -c "echo \$ESH_VERSION > $t"
              if [ $(<$t) = $ESH_VERSION ]; then
                echo $pick_sty
              fi
              rm $t
            fi
          done)
          if [ -z "$stys" ]; then
            echo "No screen sessions detected."
            return 1
          fi
          if [ $(echo "$stys" | wc -l) = 1 ]; then
            pick_sty="$stys"
          elif ! pick_sty=$(-pick-something "Resume which session?" "$stys"); then
            return $?
          fi
          if [[ $pick_sty =~ ^[0-9]+\.(.+) ]]; then
            eval "$(_esh_e)"
            ESH_TAT_HASH=$(printf $ESH_TERM_AUTH_TOKEN | openssl md5)
            ESH_TAT_HASH=${ESH_TAT_HASH##*= }
            _esh_e ${BASH_REMATCH[1]} ESH_PORT SSH_AUTH_SOCK ESH_TERM_PID ESH_TAT_HASH
            # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
            env screen -X -S $pick_sty register p $ESH_TERM_AUTH_TOKEN
            env TERM=${TERM#screen.} screen -d -r $pick_sty
            return $?
          else
            echo "failed to acquire ESH_STY value" >&2
            return 1
          fi
          ;;
        -d|-D|-R|-RR|-ls|-list|-Q|-v|-x|-X)
          env screen "$@"
          return $?
          ;;
      esac
    done
  fi
  # anticipatory optimization: pre-load vim, so it does not need to be loaded
  # in every screen window
  v --version >/dev/null
  local esc=^Aa esh_info

  if [ "$SSH_TTY" ]; then
    # assume nested gnu screen, so use alternate escape sequence
    esc=^Ee
  else

    # put a little version string in the caption
    esh_info=" %{= cd}v$ESH_VERSION"
  fi

  rcfile=$(mktemp)
  cat << EOF >$rcfile
#termcapinfo * '' u0=my_user0_string
multiuser off
bind / screen $ESH_EDITOR $(_esh_b ESH_PW_FILE)
# bind "%" to take a screenshot, and open a new window to edit it
bind % exec bash -c 'f=\$(mktemp) t=\$RANDOM; env screen -X hardcopy \$f; env screen -t \$t sh -c "$ESH_EDITOR \$f; rm \$f"; env screen -X select \$t'
bind \040 windowlist -b
vbell on
vbell_msg DING
defmonitor on
msgwait 1
hardstatus ignore
shelltitle "$ |:"
caption always "%{= kw}%-w%{= BW}%n%t%{-}%+w %-= @%H %{= Y}%l%{-} %m/%d %0c$esh_info"
register p $ESH_TERM_AUTH_TOKEN
unsetenv SCREENRC
screen
screen bash -c '_esh_b registerSty $ESH_TERM_PID \$STY'
screen rm $rcfile
EOF
  # strip off "screen." prefix from $TERM to avoid "$TERM too long" issue
  env SCREENRC=$rcfile TERM=${TERM#screen.} screen -S $ESH_STY -e$esc "${args[@]}"
}
