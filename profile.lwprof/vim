# vim:filetype=sh
vim() {
  local VIMINIT VIM_CB exec=vim shell=bash sharg="$(bash --help|grep -- --import-functions)"
  [ "$sharg" ] && shell="$shell $sharg"
  if [ "$1" = "-visudo" ]; then
    local VISUAL=vim
    exec=visudo
    shift
  fi
  export VIM_CB=$ESH_TMP/$USER.vim.clipboard
  touch $VIM_CB
  chmod 600 $VIM_CB || {
    echo "WARNING: could not chmod on $VIM_CB!"
    return
  }
  export VIMINIT='map <c-v> :let @"=system("_esh_b zGetCb")<cr>:if col("$")-col(".")==1<bar>call feedkeys("p")<bar>else<bar>call feedkeys("P")<bar>endif<bar>redraw<bar>echon "Pasted " len(@") " characters"<cr>|vnoremap <C-c> y:call writefile(split(@","\n","b"),$VIM_CB)<cr>:!cp2cb $VIM_CB<cr>|colorscheme elflord|syntax enable|set noswapfile number hlsearch incsearch sw=2 ignorecase wrap nocompatible ruler ai showmatch modeline modelines=5 nobackup nowritebackup textwidth=0 expandtab formatoptions=croql wildignore=*.class path=.,,** shcf=""|autocmd Filetype java setlocal omnifunc=javacomplete#Complete'

  vimshell() {
    eval $(_esh_e)
    eval "${BASH_ARGV[@]}"
  }
  export -f vimshell

  # NOTE: the space after vimshell was required for bash 4.3 on ARM ... not
  # sure why ... but without it, running a shell command inside vim would fail,
  # e.g. something like this:
  #   :!pwd
  # would not work. Strangely on bash 3.2 OSX it did not need the space
  env SHELL="$shell -c vimshell " $exec "$@"
}
