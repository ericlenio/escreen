# vim:filetype=sh
# Use this script to mount the encrypted filesystem, which spawns a shell so
# you can make edits. When you exit the shell, it unmounts and deallocates the
# loop device.
# Arguments: [-rw|-ro] [mountpoint]
# If neither -rw nor -ro are specified, ask
# If mountpoint is not specified, mounts in ./mnt
lwsecrets() {
  local privdir=$HOME/Documents/private
  local privurl=https://svn.lincware.com/svnpk/private
  if [ ! -d $privdir ]; then
    echo "Expected $privdir to exist, with checkout:"
    echo $privurl
    return 1
  fi
  (
    cd $privdir
    svn up


    local dat_file=lincware-secrets.dat
    local mapname=lincware-secrets
    local mountpoint=$(pwd)/mnt
    local rwro

    # read -h (help), -ro (readonly), -rw (read/write)
    # return true if should shift
    readrwro() {
      if [ "$1" = "-h" ]; then
        echo "Usage: lwsecrets [-ro|-rw] [mountpoint]" >&2
        return 0
      elif [ "$1" = "-ro" ]; then
        rwro="ro"
        return 0 # true
      elif [ "$1" = "-rw" ]; then
        rwro="rw"
        return 0 # true
      fi
      return 1 # false
    }

    # check for -ro/-rw and mount point
    if readrwro $1; then shift; fi
    if [ "$1" != "" ]; then
      mountpoint=$1
      shift
    fi
    if readrwro $1; then shift; fi

    # make sure mount point exists
    if [ ! -d "$mountpoint" ]; then
      echo "Mount point $mountpoint does not exist." >&2
      return 1
    fi

    if [ "$rwro" = "" ]; then
      # neither -ro nor -rw passed, ask
      echo "Mount the share in read-only mode (y/n)? "
      read readonly
      if [ "$readonly" = "y" ]; then
        rwro="ro"
      else
        rwro="rw"
      fi
    fi

    # set mount options if read only
    if [ "$rwro" = "ro" ]; then
      # noatime so lincware-secrets.dat is not altered
      mount_opts="-o ro,noatime"
    fi

    loopdev=$(sudo losetup --find)
    echo "Using loop device: $loopdev"

    sudo losetup $loopdev $dat_file && {
      sudo cryptsetup luksOpen $loopdev $mapname && {
        sudo mount $mount_opts /dev/mapper/$mapname $mountpoint && {
          echo
          echo "Launching a new shell now so you can make edits to files"
          echo "under $mountpoint. Type 'exit' to leave the shell, and"
          echo "$mountpoint will then be automatically unmounted."
          echo
          echo "Press ENTER to continue."
          read

          (
            cd $mountpoint
            s
          )

          sudo umount "$mountpoint"
          if [ "$rwro" = "rw" ]; then
            echo "Commit changes now (y/n)? "
            read commit
            if [ "$commit" = "y" ]; then
              svn commit
            fi
          fi
        }
        sudo cryptsetup remove $mapname
      }
      sudo losetup -d $loopdev
    }
  )
}
