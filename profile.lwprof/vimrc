let f=$ESH_HOME."/core/gpg.vimrc"
" note: @% is the current file
if filereadable(f) && @% != ""
  exe 'source '.f
  " vim 7.x seems to require re-loading the buffer, thus edit command here
  edit
endif

fu Mktmpdir()
  " make sure the temp directory exists (for long running vim sessions,
  " because a cron job might delete it) - any time we do a vim "system"
  " command this function should be called first
  let @a=fnamemodify(tempname(),":p:h")
  if ! isdirectory(@a)
    call mkdir(@a,"p",0700)
  endif
endf

" use bash's BASH_ENV variable to source a temp file when any "system" function
" is called to set ESH_TERM_AUTH_TOKEN in the shell
fu Mkbashenv()
  let @a=tempname()
  call writefile([
    \"ESH_TERM_AUTH_TOKEN=".g:ESH_TERM_AUTH_TOKEN
    \],@a)
  let $BASH_ENV=@a
  return @a
endf

fu PasteCb()
  " paste contents of OS clipboard
  try
    let @"=Systemcaller("_esh_b zGetCb")
    call feedkeys(col("$")-col(".")==1 ? "p" : "P")
    redraw
    echon "Pasted " len(@") " characters"
  catch /.*/
    echo v:exception
  endtry
endf
map <c-v> :call PasteCb()<cr>

" wraps a system call so that BASH_ENV
" can pass ESH_TERM_AUTH_TOKEN
fu Systemcaller(cmd,...)
  "try
    call Mktmpdir()
    let l:bash_env=Mkbashenv()
    if a:0 == 1
      let l:result=system(a:cmd,a:1)
    else
      let l:result=system(a:cmd)
    endif
    call delete(l:bash_env)
    if has("patch-8.0.1832")
      " https://github.com/vim/vim/issues/1116
      call Unletbashenv()
    endif
    return l:result
  "catch /.*/
    "echo v:exception
  "endtry
endf

fu Unletbashenv()
  unlet $BASH_ENV
endf

fu Cp2cb()
  " copies the contents of the unnamed register to OS clipboard;
  " NOTE: the system command will write out to a temp file
  " which is vim's tempname() function
  try
    call Systemcaller("cp2cb",@")
    echon "Copied " len(@") " characters"
  catch /.*/
    echo v:exception
  endtry
endf
" vnoremap: "v" visual mode, "nore" no recurse, "map" map
" here we remap control-c to copy the current visual selection to the OS clipboard
vnoremap <c-c> y:call Cp2cb()<cr>

if @% =~ "passwords.gpg$"
  " when editing the passwords file, remap * to copy the current word to OS clipboard
  " use the expand() function to highlight the current word (cword)
  " nmap: "n" means we are mapping a key in vim's normal mode
  nmap <buffer> * :let @/=expand("<cword>")<cr>:let @"=@/<cr>:call Cp2cb()<cr>
endif
colorscheme elflord
syntax enable
set cursorline noswapfile number hlsearch incsearch sw=2 ignorecase wrap nocompatible
set ruler ai nocindent indentexpr= showmatch modeline modelines=5 nobackup nowritebackup textwidth=0
set expandtab formatoptions=croql nojoinspaces scrolloff=0
set wildmenu wildignore=*.o,*.class,*.jar,*.png,*.pdf,$PWD/**node_modules/**,build/**,.git/**,.svn/**,dist/**,tmp/** path=.,,**
filetype indent off
"nnoremap K :execute " grep -srnw --binary-files=without-match --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=.svn . -e " . expand("<cword>") . " " <bar> cwindow<CR>
" note: vimgrep respects wildignore
nnoremap K :let @/=expand("<cword>")<bar>exe "vimgrep /" . @/ . "/g **" <bar> cwindow<CR>
if exists("my_find")
  call feedkeys(":find ".my_find."\<tab>","t")
endif
